<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.nju.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="edu.nju.model.User" >
    <result column="login" property="login" jdbcType="CHAR" />
    <result column="html_url" property="html_url" jdbcType="CHAR" />
    <result column="type" property="type" jdbcType="CHAR" />
    <result column="avatar_url" property="avatar_url" jdbcType="CHAR" />
    <result column="name" property="name" jdbcType="CHAR" />
    <result column="location" property="location" jdbcType="CHAR" />
    <result column="email" property="email" jdbcType="CHAR" />
    <result column="blog" property="blog" jdbcType="CHAR" />
    <result column="company" property="company" jdbcType="CHAR" />
    <result column="public_repos" property="public_repos" jdbcType="INTEGER" />
    <result column="public_gists" property="public_gists" jdbcType="INTEGER" />
    <result column="followers" property="followers" jdbcType="INTEGER" />
    <result column="following" property="following" jdbcType="INTEGER" />
    <result column="created_at" property="created_at" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updated_at" jdbcType="TIMESTAMP" />
    <result column="popular_score" property="popular_score" jdbcType="DOUBLE" />
    <result column="teamwork_score" property="teamwork_score" jdbcType="DOUBLE" />
    <result column="liveness_score" property="liveness_score" jdbcType="DOUBLE" />
    <result column="experience_score" property="experience_score" jdbcType="DOUBLE" />
    <result column="quantity_score" property="quantity_score" jdbcType="DOUBLE" />
    <result column="languages" property="languages" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    login, html_url, type, avatar_url, name, location, email, blog, company, public_repos,
    public_gists, followers, following, created_at, updated_at, popular_score, teamwork_score, 
    liveness_score, experience_score, quantity_score, languages
  </sql>
  <!--<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >-->
    <!--select -->
    <!--<include refid="Base_Column_List" />-->
    <!--from user-->
    <!--where id = #{id,jdbcType=INTEGER}-->
  <!--</select>-->
  <!--<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >-->
    <!--delete from user-->
    <!--where id = #{id,jdbcType=INTEGER}-->
  <!--</delete>-->
  <insert id="insert" parameterType="edu.nju.model.User" >
    insert into user (login, html_url,
      type, avatar_url, name, location, 
      email, blog, company, public_repos, 
      public_gists, followers, following, 
      created_at, updated_at, popular_score, 
      teamwork_score, liveness_score, experience_score, 
      quantity_score, languages)
    values ( #{login,jdbcType=CHAR}, #{html_url,jdbcType=CHAR},
      #{type,jdbcType=CHAR}, #{avatar_url,jdbcType=CHAR}, #{name,jdbcType=CHAR}, #{location,jdbcType=CHAR}, 
      #{email,jdbcType=CHAR}, #{blog,jdbcType=CHAR}, #{company,jdbcType=CHAR}, #{public_repos,jdbcType=INTEGER}, 
      #{public_gists,jdbcType=INTEGER}, #{followers,jdbcType=INTEGER}, #{following,jdbcType=INTEGER}, 
      #{created_at,jdbcType=TIMESTAMP}, #{updated_at,jdbcType=TIMESTAMP}, #{popular_score,jdbcType=DOUBLE}, 
      #{teamwork_score,jdbcType=DOUBLE}, #{liveness_score,jdbcType=DOUBLE}, #{experience_score,jdbcType=DOUBLE}, 
      #{quantity_score,jdbcType=DOUBLE}, #{languages,jdbcType=VARCHAR})
  </insert>

  <!--<update id="updateByPrimaryKey" parameterType="edu.nju.model.User" >-->
    <!--update user-->
    <!--set login = #{login,jdbcType=CHAR},-->
      <!--html_url = #{html_url,jdbcType=CHAR},-->
      <!--type = #{type,jdbcType=CHAR},-->
      <!--avatar_url = #{avatar_url,jdbcType=CHAR},-->
      <!--name = #{name,jdbcType=CHAR},-->
      <!--location = #{location,jdbcType=CHAR},-->
      <!--email = #{email,jdbcType=CHAR},-->
      <!--blog = #{blog,jdbcType=CHAR},-->
      <!--company = #{company,jdbcType=CHAR},-->
      <!--public_repos = #{public_repos,jdbcType=INTEGER},-->
      <!--public_gists = #{public_gists,jdbcType=INTEGER},-->
      <!--followers = #{followers,jdbcType=INTEGER},-->
      <!--following = #{following,jdbcType=INTEGER},-->
      <!--created_at = #{created_at,jdbcType=TIMESTAMP},-->
      <!--updated_at = #{updated_at,jdbcType=TIMESTAMP},-->
      <!--popular_score = #{popular_score,jdbcType=DOUBLE},-->
      <!--teamwork_score = #{teamwork_score,jdbcType=DOUBLE},-->
      <!--liveness_score = #{liveness_score,jdbcType=DOUBLE},-->
      <!--experience_score = #{experience_score,jdbcType=DOUBLE},-->
      <!--quantity_score = #{quantity_score,jdbcType=DOUBLE},-->
      <!--languages = #{languages,jdbcType=VARCHAR}-->
    <!--where id = #{id,jdbcType=INTEGER}-->
  <!--</update>-->

  <!-- 以下为自定义方法-->
  <select id="selectAll" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from user
  </select>
  <select id="selectByLogin" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from user
    where login = #{login,jdbcType=VARCHAR}
  </select>
  <select id="selectAllWithPager" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from user
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="searchUser" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from user
    where login LIKE "%"#{name}"%"
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="countFirst30Companys" resultType="java.util.LinkedHashMap">
    select company,count(id) as c
    from user
    group by company
    order by c desc
    limit 30;
  </select>
  <select id="countTypes" resultType="java.util.LinkedHashMap">
    select type,count(id) as c
    from user
    group by type
    order by c desc
  </select>
  <select id="countCreate_Year" resultType="java.util.LinkedHashMap">
    select YEAR(created_at),count(id) as c
    from user
    group by YEAR(created_at)
    order by YEAR(created_at) asc
  </select>
  <select id="selectUserByLanguage" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from user
    where languages REGEXP #{language}"[^S]"
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="selectUserByCompany" resultMap="BaseResultMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from user
    where company = #{company}
    limit #{pageOffset},#{pageSize}
  </select>
  <!-- 分页辅助方法-->
  <!--<select id="countAll" resultType="java.lang.Integer">-->
    <!--select-->
    <!--count(id)-->
    <!--from user-->
  <!--</select>-->
  <select id="countSearch" resultType="java.lang.Integer" parameterType="java.lang.String">
    select
    count(*)
    from user
    where login LIKE "%"#{name}"%"
  </select>
  <select id="countLanguage" resultType="java.lang.Integer" parameterType="java.lang.String">
    select
    count(*)
    from user
    where languages REGEXP #{language}"[^S]"
  </select>
  <select id="countCompany" resultType="java.lang.Integer" parameterType="java.lang.String">
    select
    count(*)
    from user
    where company = #{company}
  </select>
  <select id="countLan_Com" resultType="java.lang.Integer" parameterType="java.lang.String">
    select  count(*)
    from user
    where languages REGEXP #{0}"[^S]" and company like "%"#{1}"%"
  </select>
  <select id="selectLan_Com" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where languages REGEXP #{0}"[^S]" and company like "%"#{1}"%"
    limit #{3},#{2}
  </select>
  <select id="selectContriRepo" resultType="java.lang.String" parameterType="java.lang.String">
    select full_name
    from contribute
    where login = #{login}
  </select>
  <select id="selectCollaRepo" resultType="java.lang.String" parameterType="java.lang.String">
    select full_name
    from collaborate
    where login = #{login}
  </select>
  <select id="selectOwn" resultType="java.lang.String" parameterType="java.lang.String">
    select full_name
    from own
    where login = #{login}
  </select>
  <select id="selectEmail" resultType="java.lang.String">
    select email
    from user
  </select>
  <select id="countEmail" resultType="java.util.LinkedHashMap" >
   SELECT SUBSTRING_INDEX( email, '@' , -1 ) AS domain, COUNT( DISTINCT email ) AS count
    FROM user
    WHERE email LIKE '%@%'
    GROUP BY 1
    ORDER BY 2 DESC
    LIMIT 10
  </select>
  <select id="countBlog" resultType="java.lang.Integer" parameterType="java.lang.String">
    select count(blog) as c
    from user
    where blog like "%"#{blog}"%"
  </select>
  <select id="countFollowers" resultType="java.lang.Integer">
    select followers
    from user
  </select>
  <select id="countFollowings" resultType="java.lang.Integer">
    select following
    from user
  </select>
  <select id="countFans" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    select count(*)
    from user
    where #{1}>followers and followers>=#{0}
  </select>
  <select id="countFollow" resultType="java.lang.Integer" parameterType="java.lang.Integer">
     select count(*)
    from user
    where #{1}>following and following>=#{0}
  </select>
  <select id="getUserLocation" resultType="java.lang.String">
    select location
    from user
  </select>
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.nju.dao.RepositoryMapper" >
  <resultMap id="BaseResultMap" type="edu.nju.model.Repository" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="full_name" property="full_name" jdbcType="CHAR" />
    <result column="name" property="name" jdbcType="CHAR" />
    <result column="owner_name" property="owner_name" jdbcType="CHAR" />
    <result column="language" property="language" jdbcType="CHAR" />
    <result column="open_issues_count" property="open_issues_count" jdbcType="INTEGER" />
    <result column="watchers_count" property="watchers_count" jdbcType="INTEGER" />
    <result column="clone_url" property="clone_url" jdbcType="CHAR" />
    <result column="html_url" property="html_url" jdbcType="CHAR" />
    <result column="homepage" property="homepage" jdbcType="CHAR" />
    <result column="created_at" property="created_at" jdbcType="TIMESTAMP" />
    <result column="pushed_at" property="pushed_at" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updated_at" jdbcType="TIMESTAMP" />
    <result column="size" property="size" jdbcType="INTEGER" />
    <result column="stargazers_count" property="stargazers_count" jdbcType="INTEGER" />
    <result column="forks_count" property="forks_count" jdbcType="INTEGER" />
    <result column="subscribers_count" property="subscribers_count" jdbcType="INTEGER" />
    <result column="languages" property="languages" jdbcType="VARCHAR" />
    <result column="size_score" property="size_score" jdbcType="DOUBLE" />
    <result column="scale_score" property="scale_score" jdbcType="DOUBLE" />
    <result column="promising_score" property="promising_score" jdbcType="DOUBLE" />
    <result column="participation_score" property="participation_score" jdbcType="DOUBLE" />
    <result column="hot_score" property="hot_score" jdbcType="DOUBLE" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="edu.nju.model.Repository" extends="BaseResultMap" >
    <result column="description" property="description" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, full_name, name, owner_name, language, open_issues_count, watchers_count, clone_url, 
    html_url, homepage, created_at, pushed_at, updated_at, size, stargazers_count, forks_count, 
    subscribers_count, languages, size_score, scale_score, promising_score, participation_score, 
    hot_score
  </sql>
  <sql id="Blob_Column_List" >
    description
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from repository
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="edu.nju.model.Repository" >
    insert into repository (id, full_name, name, 
      owner_name, language, open_issues_count, 
      watchers_count, clone_url, html_url, 
      homepage, created_at, pushed_at, 
      updated_at, size, stargazers_count, 
      forks_count, subscribers_count, languages, 
      size_score, scale_score, promising_score, 
      participation_score, hot_score, description
      )
    values (#{id,jdbcType=INTEGER}, #{full_name,jdbcType=CHAR}, #{name,jdbcType=CHAR}, 
      #{owner_name,jdbcType=CHAR}, #{language,jdbcType=CHAR}, #{open_issues_count,jdbcType=INTEGER}, 
      #{watchers_count,jdbcType=INTEGER}, #{clone_url,jdbcType=CHAR}, #{html_url,jdbcType=CHAR}, 
      #{homepage,jdbcType=CHAR}, #{created_at,jdbcType=TIMESTAMP}, #{pushed_at,jdbcType=TIMESTAMP}, 
      #{updated_at,jdbcType=TIMESTAMP}, #{size,jdbcType=INTEGER}, #{stargazers_count,jdbcType=INTEGER}, 
      #{forks_count,jdbcType=INTEGER}, #{subscribers_count,jdbcType=INTEGER}, #{languages,jdbcType=VARCHAR}, 
      #{size_score,jdbcType=DOUBLE}, #{scale_score,jdbcType=DOUBLE}, #{promising_score,jdbcType=DOUBLE}, 
      #{participation_score,jdbcType=DOUBLE}, #{hot_score,jdbcType=DOUBLE}, #{description,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="edu.nju.model.Repository" >
    insert into repository
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="full_name != null" >
        full_name,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="owner_name != null" >
        owner_name,
      </if>
      <if test="language != null" >
        language,
      </if>
      <if test="open_issues_count != null" >
        open_issues_count,
      </if>
      <if test="watchers_count != null" >
        watchers_count,
      </if>
      <if test="clone_url != null" >
        clone_url,
      </if>
      <if test="html_url != null" >
        html_url,
      </if>
      <if test="homepage != null" >
        homepage,
      </if>
      <if test="created_at != null" >
        created_at,
      </if>
      <if test="pushed_at != null" >
        pushed_at,
      </if>
      <if test="updated_at != null" >
        updated_at,
      </if>
      <if test="size != null" >
        size,
      </if>
      <if test="stargazers_count != null" >
        stargazers_count,
      </if>
      <if test="forks_count != null" >
        forks_count,
      </if>
      <if test="subscribers_count != null" >
        subscribers_count,
      </if>
      <if test="languages != null" >
        languages,
      </if>
      <if test="size_score != null" >
        size_score,
      </if>
      <if test="scale_score != null" >
        scale_score,
      </if>
      <if test="promising_score != null" >
        promising_score,
      </if>
      <if test="participation_score != null" >
        participation_score,
      </if>
      <if test="hot_score != null" >
        hot_score,
      </if>
      <if test="description != null" >
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="full_name != null" >
        #{full_name,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=CHAR},
      </if>
      <if test="owner_name != null" >
        #{owner_name,jdbcType=CHAR},
      </if>
      <if test="language != null" >
        #{language,jdbcType=CHAR},
      </if>
      <if test="open_issues_count != null" >
        #{open_issues_count,jdbcType=INTEGER},
      </if>
      <if test="watchers_count != null" >
        #{watchers_count,jdbcType=INTEGER},
      </if>
      <if test="clone_url != null" >
        #{clone_url,jdbcType=CHAR},
      </if>
      <if test="html_url != null" >
        #{html_url,jdbcType=CHAR},
      </if>
      <if test="homepage != null" >
        #{homepage,jdbcType=CHAR},
      </if>
      <if test="created_at != null" >
        #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="pushed_at != null" >
        #{pushed_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null" >
        #{updated_at,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null" >
        #{size,jdbcType=INTEGER},
      </if>
      <if test="stargazers_count != null" >
        #{stargazers_count,jdbcType=INTEGER},
      </if>
      <if test="forks_count != null" >
        #{forks_count,jdbcType=INTEGER},
      </if>
      <if test="subscribers_count != null" >
        #{subscribers_count,jdbcType=INTEGER},
      </if>
      <if test="languages != null" >
        #{languages,jdbcType=VARCHAR},
      </if>
      <if test="size_score != null" >
        #{size_score,jdbcType=DOUBLE},
      </if>
      <if test="scale_score != null" >
        #{scale_score,jdbcType=DOUBLE},
      </if>
      <if test="promising_score != null" >
        #{promising_score,jdbcType=DOUBLE},
      </if>
      <if test="participation_score != null" >
        #{participation_score,jdbcType=DOUBLE},
      </if>
      <if test="hot_score != null" >
        #{hot_score,jdbcType=DOUBLE},
      </if>
      <if test="description != null" >
        #{description,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="edu.nju.model.Repository" >
    update repository
    <set >
      <if test="full_name != null" >
        full_name = #{full_name,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=CHAR},
      </if>
      <if test="owner_name != null" >
        owner_name = #{owner_name,jdbcType=CHAR},
      </if>
      <if test="language != null" >
        language = #{language,jdbcType=CHAR},
      </if>
      <if test="open_issues_count != null" >
        open_issues_count = #{open_issues_count,jdbcType=INTEGER},
      </if>
      <if test="watchers_count != null" >
        watchers_count = #{watchers_count,jdbcType=INTEGER},
      </if>
      <if test="clone_url != null" >
        clone_url = #{clone_url,jdbcType=CHAR},
      </if>
      <if test="html_url != null" >
        html_url = #{html_url,jdbcType=CHAR},
      </if>
      <if test="homepage != null" >
        homepage = #{homepage,jdbcType=CHAR},
      </if>
      <if test="created_at != null" >
        created_at = #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="pushed_at != null" >
        pushed_at = #{pushed_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null" >
        updated_at = #{updated_at,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null" >
        size = #{size,jdbcType=INTEGER},
      </if>
      <if test="stargazers_count != null" >
        stargazers_count = #{stargazers_count,jdbcType=INTEGER},
      </if>
      <if test="forks_count != null" >
        forks_count = #{forks_count,jdbcType=INTEGER},
      </if>
      <if test="subscribers_count != null" >
        subscribers_count = #{subscribers_count,jdbcType=INTEGER},
      </if>
      <if test="languages != null" >
        languages = #{languages,jdbcType=VARCHAR},
      </if>
      <if test="size_score != null" >
        size_score = #{size_score,jdbcType=DOUBLE},
      </if>
      <if test="scale_score != null" >
        scale_score = #{scale_score,jdbcType=DOUBLE},
      </if>
      <if test="promising_score != null" >
        promising_score = #{promising_score,jdbcType=DOUBLE},
      </if>
      <if test="participation_score != null" >
        participation_score = #{participation_score,jdbcType=DOUBLE},
      </if>
      <if test="hot_score != null" >
        hot_score = #{hot_score,jdbcType=DOUBLE},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="edu.nju.model.Repository" >
    update repository
    set full_name = #{full_name,jdbcType=CHAR},
      name = #{name,jdbcType=CHAR},
      owner_name = #{owner_name,jdbcType=CHAR},
      language = #{language,jdbcType=CHAR},
      open_issues_count = #{open_issues_count,jdbcType=INTEGER},
      watchers_count = #{watchers_count,jdbcType=INTEGER},
      clone_url = #{clone_url,jdbcType=CHAR},
      html_url = #{html_url,jdbcType=CHAR},
      homepage = #{homepage,jdbcType=CHAR},
      created_at = #{created_at,jdbcType=TIMESTAMP},
      pushed_at = #{pushed_at,jdbcType=TIMESTAMP},
      updated_at = #{updated_at,jdbcType=TIMESTAMP},
      size = #{size,jdbcType=INTEGER},
      stargazers_count = #{stargazers_count,jdbcType=INTEGER},
      forks_count = #{forks_count,jdbcType=INTEGER},
      subscribers_count = #{subscribers_count,jdbcType=INTEGER},
      languages = #{languages,jdbcType=VARCHAR},
      size_score = #{size_score,jdbcType=DOUBLE},
      scale_score = #{scale_score,jdbcType=DOUBLE},
      promising_score = #{promising_score,jdbcType=DOUBLE},
      participation_score = #{participation_score,jdbcType=DOUBLE},
      hot_score = #{hot_score,jdbcType=DOUBLE},
      description = #{description,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.nju.model.Repository" >
    update repository
    set full_name = #{full_name,jdbcType=CHAR},
      name = #{name,jdbcType=CHAR},
      owner_name = #{owner_name,jdbcType=CHAR},
      language = #{language,jdbcType=CHAR},
      open_issues_count = #{open_issues_count,jdbcType=INTEGER},
      watchers_count = #{watchers_count,jdbcType=INTEGER},
      clone_url = #{clone_url,jdbcType=CHAR},
      html_url = #{html_url,jdbcType=CHAR},
      homepage = #{homepage,jdbcType=CHAR},
      created_at = #{created_at,jdbcType=TIMESTAMP},
      pushed_at = #{pushed_at,jdbcType=TIMESTAMP},
      updated_at = #{updated_at,jdbcType=TIMESTAMP},
      size = #{size,jdbcType=INTEGER},
      stargazers_count = #{stargazers_count,jdbcType=INTEGER},
      forks_count = #{forks_count,jdbcType=INTEGER},
      subscribers_count = #{subscribers_count,jdbcType=INTEGER},
      languages = #{languages,jdbcType=VARCHAR},
      size_score = #{size_score,jdbcType=DOUBLE},
      scale_score = #{scale_score,jdbcType=DOUBLE},
      promising_score = #{promising_score,jdbcType=DOUBLE},
      participation_score = #{participation_score,jdbcType=DOUBLE},
      hot_score = #{hot_score,jdbcType=DOUBLE}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 以下为自定义方法-->
  <select id="selectAll" resultMap="ResultMapWithBLOBs" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
  </select>
  <select id="selectFullName" resultType="java.lang.String" >
    select full_name
    from repository
  </select>
  <select id="selectByFullName" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    where full_name = #{fullName,jdbcType=VARCHAR}
  </select>
  <select id="searchRepository" resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    where full_name LIKE "%"#{fullName}"%"
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="selectReposSortedByFork" resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    ORDER BY forks_count desc
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="selectReposSortedByStar" resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    ORDER BY stargazers_count desc
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="selectReposSortedByContribute" resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    ORDER BY contributors_count desc
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="selectAllPaged" resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="selectReposByYear" resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    where YEAR(created_at) = #{year}
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="selectReposByLanguage" resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    where language = #{language}
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="selectReposByKey" resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    where description like "%"#{keyword}"%"
    limit #{pageOffset},#{pageSize}
  </select>
  <select id="selectReposByLan_Key_Year" resultMap="ResultMapWithBLOBs" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    where (#{0}="" or language =#{0}) and YEAR(created_at) like "%"#{2}"%" and description like "%"#{1}"%"
    order BY ${sort} DESC
    limit #{5},#{4}
  </select>
  <!-- 分页辅助方法-->
  <!--<select id="countAll" resultType="java.lang.Integer">-->
    <!--select-->
    <!--count(id)-->
    <!--from repository-->
  <!--</select>-->
  <!--<select id="countSearch" resultType="java.lang.Integer" parameterType="java.lang.String">-->
    <!--select-->
    <!--count(id)-->
    <!--from repository-->
    <!--where full_name LIKE "%"#{fullName}"%"-->
  <!--</select>-->
  <!--<select id="countYear" resultType="java.lang.Integer" parameterType="java.lang.Integer">-->
    <!--select-->
    <!--count(id)-->
    <!--from repository-->
    <!--where YEAR(created_at) = #{year}-->
  <!--</select>-->
  <!--<select id="countLanguage" resultType="java.lang.Integer" parameterType="java.lang.String">-->
    <!--select-->
    <!--count(id)-->
    <!--from repository-->
    <!--where language = #{language}-->
  <!--</select>-->
  <!--<select id="countKey" resultType="java.lang.Integer" parameterType="java.lang.String">-->
    <!--select-->
    <!--count(id)-->
    <!--from repository-->
    <!--where description like "%"#{keyword}"%"-->
  <!--</select>-->
  <select id="countLan_Key_Year" resultType="java.lang.Integer" parameterType="java.lang.String">
    select  count(id)
    from repository
    where (#{0}="" or language =#{0}) and YEAR(created_at)like "%"#{2}"%" and description like "%"#{1}"%"
  </select>
  <select id="countFirst20Languages" resultType="java.util.LinkedHashMap">
    select language,count(id) as c
    from repository
    group by language
    order by c desc
    limit 20;
  </select>
  <select id="getLanguageAndSize" resultType="java.util.LinkedHashMap">
    select language,sum(size) as s
    from repository
    group by language
    order by s desc
  </select>
  <select id="countLanguagesCreated" resultType="java.lang.Integer" parameterType="java.lang.String">
    select count(id)
    from repository
    where language = #{1} and YEAR(created_at) = #{0}
  </select>
  <select id="countCreatedYear" resultType="java.util.LinkedHashMap">
    select YEAR(created_at)as year ,count(id) as c
    from repository
    group by year
    order by year asc
  </select>
<select id="getContributors" resultType="java.lang.String" parameterType="java.lang.String">
select login
  from contribute
  where full_name = #{full_name}
</select>
  <select id="getCollaborators" resultType="java.lang.String" parameterType="java.lang.String">
    select login
    from collaborate
    where full_name = #{full_name}
  </select>
  <select id="countFirst10Languages" resultType="java.lang.String">
    select language
    from repository
    group by language
    order by count(id) desc
    limit 10;
  </select>
  <select id="countForks" resultType="java.lang.Integer">
    select forks_count
    from repository force index (primary)
  </select>
  <select id="countSubscribers" resultType="java.lang.Integer">
    select subscribers_count
    from repository
  </select>
  <select id="countStars" resultType="java.lang.Integer">
    select stargazers_count
    from repository force index (primary)
  </select>
  <select id="getYear" resultType="java.lang.String">
    select DISTINCT YEAR(created_at)
    from repository
    order by YEAR(created_at) asc
  </select>
  <select id="eachYear" resultType="java.lang.String">
    select  YEAR(created_at)
    from repository
    force index (primary)
  </select>
  <select id="eachSize" resultType="java.lang.Integer">
    select size
    from repository
    force index (primary)
  </select>
  <select id="countAverageSize_year" resultType="java.util.LinkedHashMap">
    SELECT YEAR(created_at) as year,AVG(size) as size FROM `repository` GROUP BY 1;
  </select>
  <select id="selectLanguages" resultType="java.lang.String">
    SELECT languages
    from repository;
  </select>
</mapper>